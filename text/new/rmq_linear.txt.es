<h1>the Task of RMQ (Range Minimum Query minimum on the interval). The decision for O (1) time with preprocessing O (N)</h1>
<p>Given an array A[1..N]. Receive requests of the form (L, R), for each query you want to find the minimum in array A starting at position L and ending at position R. the Array A change in the process can not, i.e. it describes the solution to the static problem of RMQ.</p>
<p>Here are asimptoticheski optimal solution. It stands apart from several other algorithms solving RMQ, since it is very different from them: it reduces the problem to RMQ problem to the LCA and then uses <algohref=lca_linear>algorithm Farah-Colton and Bender</algohref>, which reduces the LCA problem to RMQ returning (but private) and solves it.</p>
the <h2>the Algorithm</h2>
<p>Construct the array A Cartesian tree, where each node's key is position i, and priority - the number A[i] (assuming over the Cartesian tree the priorities are ordered from smallest to largest at the root). Such a tree can be built in O (N). Then the query RMQ(l,r) is equivalent to the query LCA(l\',r\'), where l\' be the vertex corresponding to the element A[l], r\' - corresponding to A[r]. Indeed, LCA will find the top which the key is located between l\' r\', i.e. on the position in the array A between l and r, and the vertex closest to the root, i.e. with the smallest priority, i.e. the lowest value.</p>
<p>the LCA Problem we can solve in O (1) preprocessing O (N) <algohref=lca_linear>algorithm Farah-Colton and Bender</algohref>, which, interestingly, reduces the LCA problem back to the RMQ problem, but a particular type.</p>
