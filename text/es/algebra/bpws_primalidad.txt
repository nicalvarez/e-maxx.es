<h1>prueba de BPSW en la simplicidad de números</h1>
<hr>
<h2>Introducción</h2>
<p>el Algoritmo de BPSW es la prueba de que el número en la simplicidad. Este algoritmo llamado así por los apellidos de sus inventores: Robert Bailey (Ballie), Carlos Померанс (Pomerance), John Селфридж (Selfridge), Samuel Вагстафф (Wagstaff). El algoritmo fue propuesto en la década de 1980. Hoy en día, el algoritmo no se ha encontrado ningún контрпримера, así como no se ha encontrado la prueba.</p>
<p>el Algoritmo de BPSW ha sido probado en todos los números hasta el 10<sup>15</sup>. Además, контрпример trató de encontrar mediante el programa de PRIMO (consulte la <a href="
template 
const std::vector<T> 
//! Trivial comprobación de la n a la sencillez, se trasladan todas las rias a la m.
//! Resultado: 1 - si n con precisión simple, p - su originario divisor, 0 si desconocido
template 
T2 <b>prime_div_trivial</b> (const T 
<hr>
<h2>el Test de Miller-Rabin</h2>
<p>no voy a concentrar la atención en el test de Miller-Rabin, ya que él se describe cómo en muchas fuentes, incluyendo y en ruso (por ejemplo. consulte la <a href="
<p>y, al menos, uno de los factores es igual a cero por el módulo N.</p>
<p>Claro que <b>, basta con calcular U<sub>E</sub> y V<sub>E</sub></b> y todos los multiplicadores V<sub>2</sub> V<sub>4E</sub> ... V<sub>2<sup>T-2</sup>E</sub> V<sub>2<sup>T-1</sup>E</sub> <b>obtener de ellos</b>.</p>
<p>Por lo tanto, queda aprender a calcular rápidamente U<sub>E</sub> y V<sub>E</sub> para impar E.</p>
<p>en primer lugar, consideremos la siguiente fórmula para la suma de los miembros de la secuencia de Lucas:</p>
<formula>U<sub>i j</sub> = (U<sub>i</sub> V<sub>j</sub> U<sub>j</sub> V<sub>i</sub>) / 2 (mod N)
V<sub>i j</sub> = (V<sub>i</sub> V<sub>j</sub> D U<sub>i</sub> U<sub>j</sub>) / 2 (mod N)</formula>
<p>hay que tener en cuenta que la división se realiza en el campo (mod N).</p>
<p>la Fórmula de estos доказываются es muy sencillo, y aquí la prueba se omite.</p>
<p>Ahora, con fórmulas para la suma y para duplicar los miembros de secuencias de Lucas, clara y método de la aceleración de cálculo U<sub>E</sub> y V<sub>E</sub>.</p>
<p>en efecto, consideremos la entrada binaria el número de E. Ponemos primero el resultado de la - U<sub>E</sub> y V<sub>E</sub> - iguales, respectivamente, U<sub>1</sub> y V<sub>1</sub>. Vamos a hacer un recorrido por todos los bits del número E, de más jóvenes a los más mayores, dejando sólo el primer bit de inicio de un miembro de la orden). Para cada i-ésimo bit vamos a calcular U<sub>2<sup> i</sup></sub> y V<sub>2<sup> i</sup></sub> de antiguos miembros a través de fórmulas de doblar. Además, si el i-primer bit es la unidad, entonces la respuesta vamos a sumar actuales U<sub>2<sup> i</sup></sub> y V<sub>2<sup> i</sup></sub> a través de fórmulas de suma. Al final del algoritmo, en ejecución de O (log(E)), nos <b>obtenemos los U<sub>E</sub> y V<sub>E</sub></b>.</p>
<p>Si U<sub>E</sub> o V<sub>E</sub> parecen ser iguales a cero (mod N), entonces el número N simple (o псевдопростое). Si ambos son diferentes de cero, entonces calculamos V<sub>2</sub>, V<sub>4E</sub>, ... V<sub>2<sup>T-2</sup>E</sub>, V<sub>2<sup>T-1</sup>E</sub>. Si al menos uno de ellos es comparable con el cero en el módulo N, es el número N simple (o псевдопростое). De lo contrario, el número N compuesto.</p>
<h3>la Discusión del algoritmo de Селфриджа</h3>
<p>Ahora que hemos cubierto el algoritmo de Lucas, se puede profundizar en los valores de D,P,Q, una de las maneras de conseguir de lo que es el algoritmo de Селфриджа.</p>
<p>Recordemos los requisitos básicos de opciones:</p>
<formula><b>P > 0</b>
<b>el D = P<sup>2</sup> - 4*Q ? 0</b>.</formula>
<p>Ahora continuaremos el estudio de estos parámetros.</p>
<p><b>D no debe ser exacta cuadrado (mod N)</b>.</p>
<p>Realmente, de lo contrario obtendremos:</p>
<p>D = b<sup>2</sup>, de ahí J(D,N) = 1, P = b 2, Q = b 1, a partir de aquí U<sub>n-1</sub> = (Q<sup>n-1</sup> - 1) / (Q - 1).</p>
<p>Es decir, si D el cuadrado, el algoritmo de Lucas es casi normal probabilística de la prueba.</p>
<p>Una de las mejores maneras de evitar este tipo de <b>exigir que J(D,N) = -1</b>.</p>
<p>por Ejemplo, puede seleccionar el primer número de la secuencia D 5, -7, 9, -11, 13, ..., para el que J(D,N) = -1. También supongamos que P = 1. Entonces Q = (1 - D) / 4. Este método fue propuesto Селфриджем.</p>
<p>sin Embargo, hay otras formas de selección de D. Puede elegir a partir de una secuencia 5, 9, 13, 17, 21, ... También supongamos que P es la menor impar, привосходящее sqrt(D). Entonces Q = (P<sup>2</sup> - D) / 4.</p>
<p>es evidente que de la selección de un método para el cálculo de parámetros de Lukas depende de su resultado - псевдопростые pueden variar si las diferentes maneras de seleccionar una opción. Como ha demostrado la práctica, el algoritmo propuesto Селфриджем es muy acertado: todos los псевдопростые Lukas, Селфриджа no son псевдопростыми de Miller-Rabin, por lo menos, ninguno контрпримера no se había resuelto.</p>
<h3>la Implementación de un fuerte algoritmo de Lucas-Селфриджа</h3>
<p>Ahora solo queda implementar el algoritmo:</p>
<code>template 
bool lucas_selfridge (const T 
{
// primero comprobamos triviales de los casos
if (n == 2)
return true
if (n 
return false
// comprobamos que el n no es un cuadrado exacto, de lo contrario, el algoritmo dará un error
if (perfect_square (n))
return false
// algoritmo de Селфриджа: encontramos el primer número d tal que:
// jacobi(d,n)=-1 y pertenece a la serie { 5,-7,9,-11,13,... }
T2 dd
for (T2 d_abs = 5, d_sign = 1
{
dd = d_abs * d_sign
T g = mcd (n, d_abs)
if (1 
// encontrado un divisor - d_abs
return false
if (jacobi (T(dd), n)) = = -1)
break
}
// configuración de Селфриджа
T2
p = 1,
q = (p*p - dd) / 4
// разлагаем n 1 = d*2^s
T n_1 = n
 n_1
T s, d
transform_num (n_1, s, d)
// algoritmo de Lucas
T
u = 1,
v = p,
u2m = 1,
v2m = p
qm = q,
qm2 = q*2,
qkd = q
for (unsigned bit = 1, bits = bits_in_number(d)
{
mulmod (u2m, v2m, n)
mulmod (v2m, v2m, n)
while (v2m < qm2)
v2m = n
v2m -= qm2
mulmod (qm qm, n)
qm2 = qm
redoblar (qm2)
if (test_bit (d, bit))
{
T t1, t2
t1 = u2m
mulmod (t1, v, n)
t2 = v2m
mulmod (t2, u, n)
T t3, t4
t3 = v2m
mulmod (t3, v, n)
t4 = u2m
mulmod (t4, u, n)
mulmod (t4, (T)dd, n)
u = t1 t2
if (!even (u))
u = n
bisect (u)
u %= n
v = t3 t4
if (!even (v))
v = n
bisect (v)
mulmod (qkd, qm, n)
}
}
// precisión simple (o pseudo-simple)
if (e == 0 || v == 0)
return true
// довычисляем el resto de los miembros
T qkd2 = qkd
redoblar (qkd2)
for (T2 r = 1
{
mulmod (v, v, n)
v -= qkd2
if (v 
if (v 
if (v >= n) v= n
if (v >= n) v= n
if (v == 0)
return true
if (r 
{
mulmod (qkd, qkd, n)
qkd2 = qkd
redoblar (qkd2)
}
}
return false
}</code>
<hr>
<h2>el Código BPSW</h2>
<p>Ahora queda simplemente combinar los resultados de todos los 3 pruebas: verificación de los pequeños triviales rias, el test de Miller-Rabin, el fuerte de la prueba de Lucas-Селфриджа.</p>
<code>template 
bool baillie_pomerance_selfridge_wagstaff (T n)
{
// primero comprobamos en triviales rias - por ejemplo, hasta el 29 de
int div = prime_div_trivial (n 29)
if (div == 1)
return true
if (div > 1)
return false
// prueba de Miller-Rabin base 2
if (!miller_rabin (n, 2))
return false
// el fuerte el test de Lucas-Селфриджа
return lucas_selfridge (n, 0)
}</code>
<p><a href=BPSW_main.zip>Aquí</a> puede descargar el programa (fuente exe), contiene una completa aplicación de la prueba de BPSW. [77 KB]</p>
<hr>
<h2>Resumen de la aplicación</h2>
<p>la Longitud de código se puede reducir considerablemente, en detrimento de la universalidad, renunciando a las plantillas y las diferentes funciones auxiliares.</p>
<code>const int trivial_limit = 50
int p[1000]
int mcd (int a, int b) {
retorno a ? gcd (b%a, a) : b
}
int powmod (int a, int b, int m) {
int res = 1
while (b)
if (b 
res = res * 1ll * a) % m --b
else
a = (a * 1ll * a) % m, b > > a= 1
return res
}
bool miller_rabin (int n) {
int b = 2
for (int g
if (n > g)
return false
int p=0, q=n-1
while ((q 
 p, q >>= 1
int rem = powmod (b, q, n)
if (rem == 1 || rem == n-1)
return true
for (int i=1
rem = (rem * 1ll * rem) % n
if (rem == n-1) return true
}
return false
}
int jacobi (int a, int b)
{
if (a == 0) return 0
if (a == 1) return 1
if (a 
if ((b 
return jacobi (a, b)
else
return - jacobi (a, b)
int a1=a, e=0
while ((a1 
a1 > > a= 1, e
int s
if ((e 
s = 1
else
s = -1
if ((b 
s = -s
if (a1 == 1)
return s
return s * jacobi (b % a1, a1)
}
bool bpsw (int n) {
if ((int)sqrt(n 0.0) * (int)sqrt(0.0) == n) return false
int dd=5
for (
int g = mcd (n, abs(dd))
if (1
if (jacobi (dd, n) == -1) break
dd = dd
}
int p=1, q=(p*p-dd)/4
int d=n-1, s=0
while ((d 
 s, d>>a=1
long long u=1, v=p, u2m=1, v2m=p, qm=q, el qm2=q*2, qkd=q
for (int mask=2
u2m = (u2m * v2m) % n
v2m = (v2m * v2m) % n
while (v2m < qm2) v2m = n
v2m -= qm2
qm = (qm * qm) % n
qm2 = qm * 2
if (d 
long long t1 = (u2m * v) % n, t2 = (v2m * u) % n,
t3 = (v2m * v) % n, t4 = (((u2m * u) % n) * dd) % n
u = t1 t2
if (u 
u = (u >> 1) % n
v = t3 t4
if (v 
v = (v >> 1) % n
qkd = (qkd * qm) % n
}
}
if (e==0 || v==0) return true
long long qkd2 = qkd*2
for (int r=1
v = (v * v) % n - qkd2
if (v 
if (v 
if (v >= n) v= n
if (v >= n) v= n
if (v == 0) return true
if (r 
qkd = (qkd * 1ll * qkd) % n
qkd2 = qkd * 2
}
}
return false
}
bool prime (int n) { // esta función es necesario llamar para comprobar la sencillez de
for (int i=0
if (n % p[i] == 0)
return false
if (p[trivial_limit-1]*p[trivial_limit-1] >= n)
return true
if (!miller_rabin (n))
return false
return bpsw (n)
}
void prime_init() { // llamar antes de la primera llamada prime (a) !
for (int i=2, j=0
bool pr = true
for (int k=2
if (i % k == 0)
pr = false
if (pr)
p[j ] = i
}
}</code>
<hr>
<h2>Heurística de la prueba de refutación de Померанса</h2>
<p>Померанс en 1984 propuso la siguiente heurística de la prueba.</p>
<p>la Aprobación de: <b>Número de BPSW-псевдопростых de 1 a X más X<sup>1-a</sup> para cualquier a > 0</b>.</p>
<p>la Prueba.</p>
<p>supongamos Que k > 4 - es arbitraria, pero un número fijo. Supongamos que T es un número grande.</p>
<p>supongamos Que P<sub>k</sub>(T) - muchas de estas simples de p en el intervalo [T
<p>(1) p = 3 (mod 8), J(5,p) = -1</p>
<p>(2) el número de (p-1)/2 no es preciso un cuadrado</p>
<p>(3) número de (p-1)/2 se compone exclusivamente de simples q < T
<p>(4) número de (p-1)/2 se compone exclusivamente de simples q que q = 1 (mod 4)</p>
<p>(5) el número (p 1)/4 no es preciso un cuadrado</p>
<p>(6) el número (p 1)/4 se compone exclusivamente de simples d < T</p>
<p>(7) número (p 1)/4 se compone exclusivamente de simples d que q = 3 (mod 4)</p>
<p>Claro que aproximadamente 1/8 de todos los sencillos en el intervalo [T
<p><img src=BPSW_formula1.jpg></p>
<p>donde c es cierta una constante positiva que depende de la selección de k.</p>
<p><img src=BPSW_formula2.jpg></p>
<p>para el gran T y fijo k. Además, cada número n es menor e<sup>T<sup>2</sup></sup>.</p>
<p>se Denota por Q<sub>1</sub> obra simples q < T, para los que q = 1 (mod 4), y a través de Q<sub>3</sub> - obra simples q < T, para los que q = 3 (mod 4). Entonces gcd (Q<sub>1</sub>, Q<sub>3</sub>) = 1 y Q<sub>1</sub> Q<sub>3</sub> ? e<sup>T</sup>. Por lo tanto, la cantidad de maneras de elegir un n <b>los términos y condiciones adicionales</b></p>
<formula>n = 1 (mod Q<sub>1</sub>), n = -1 (mod Q<sub>3</sub>)</formula>
<p>debe ser, эвристически, como mínimo,</p>
<formula>e<sup>T<sup> 2</sup> (1 - 3 / k)</sup> / e<sup> 2T</sup> > <b>e<sup>T<sup> 2</sup> (1 - 4 / k)</sup></b></formula>
<p>para el gran T.</p>
<p>Pero <b>cada n es контрпример a la prueba BPSW</b>. Realmente, n será el número de Кармайкла (es decir, el número en el que el test de Miller-Rabin sería equivocarse en cualquier base), por lo que automáticamente se псевдопростым base 2. Dado que n = 3 (mod 8) y cada uno de los p | n es igual a 3 (mod 8), es evidente que n también habrá un fuerte псевдопростым base 2. Puesto que J(5,n) = -1, entonces cada una simple p | n cumple J(5,p) = -1, y puesto que p 1 | n 1 para cualquier simple p | n, de aquí se sigue que n - псевдопростое Lucas para cualquier prueba de Lucas con дискриминантом 5.</p>
<p>Por lo tanto, hemos demostrado que para cualquier fijo k y todos los grandes de T, como mínimo, e<sup>T<sup> 2</sup> (1 - 4 / k)</sup> контрпримеров a la prueba BPSW entre los números más pequeños e<sup>T<sup> 2</sup></sup>. Ahora, si ponemos x = e<sup>T<sup> 2</sup></sup>, como mínimo, x<sup>1 - 4 / k</sup> контрпримеров menor que x. Dado que k es un número al azar, nuestra evidencia indica que <b>el número de контрпримеров menor que x, es el número mayor que x<sup>1-a</sup> para cualquier a > 0</b>.</p>
<hr>
<h2>las pruebas Prácticas de la prueba de BPSW</h2>
<p>En esta sección se examinarán los resultados de mí en las pruebas de mi implementar la prueba BPSW. Todas las pruebas se llevaron a cabo en el tipo de - 64-bits como long long. Largo de la aritmética no se ha probado.</p>
<p>las Pruebas se realizaron en un equipo con un procesador Celeron 1.3 GHz.</p>
<p>Todos los tiempos se dan en la <b>microsegundos</b> 10<sup> -6</sup> s.</p>
<h3>el tiempo Promedio de trabajo en el intervalo de los números en función del límite de lo trivial que revienta</h3>
<p>Tiene en cuenta el parámetro pasado a la función prime_div_trivial(), que en el código anterior es igual a 29.</p>
<p><a href="BPSW_test_1.zip">Descargar</a> un programa de prueba (el codigo fuente y el archivo exe). [83 KB]</p>
<p>Si desea ejecutar una prueba <b>en todos los números impares</b> de la corte, los resultados se obtienen como:</p>
<table class=tabla2 cellspacing=0>
<tr><th>inicio<br>corte</th><th>final<br>corte</th><th>límite ><br>la fuerza bruta a ></th><th width=13%>0</th><th width=13%>10<sup>2</sup></th><th width=13%>10<sup>3</sup></th><th width=13%>10<sup>4</sup></th><th width=13%>10<sup>5</sup></th></tr>
<tr><td>1</td><td>10<sup>5</sup></td><td></td><td>8.1</td><td>4.5</td><td>0.7</td><td>0.7</td><td>0.9</td></tr>
<tr><td>10<sup>6</sup></td><td>10<sup>6</sup> 10<sup>5</sup></td><td></td><td>12.8</td><td>6.8</td><td>7.0</td><td>1.6</td><td>1.6</td>
<tr><td>10<sup>9</sup></td><td>10<sup>9</sup> 10<sup>5</sup></td><td></td><td>28.4</td><td>12.6</td><td>12.1</td><td>17.0</td><td>17.1</td></tr>
<tr><td>10<sup>12</sup></td><td>10<sup>12</sup> 10<sup>5</sup></td><td></td><td>41.5</td><td>16.5</td><td>15.3</td><td>19.4</td><td>54.4</td></tr>
<tr><td>10<sup>15</sup></td><td>10<sup>15</sup> 10<sup>5</sup></td><td></td><td>66.7</td><td>24.4</td><td>21.1</td><td>24.8</td><td>58.9</td></tr>
</table>
<p>Si desea ejecutar una prueba <b>sólo en simples números</b> de corte, la velocidad de funcionamiento es el siguiente:</p>
<table class=tabla2 cellspacing=0>
<tr><th>inicio<br>corte</th><th>final<br>corte</th><th>límite ><br>la fuerza bruta a ></th><th width=13%>0</th><th width=13%>10<sup>2</sup></th><th width=13%>10<sup>3</sup></th><th width=13%>10<sup>4</sup></th><th width=13%>10<sup>5</sup></th></tr>
<tr><td>1</td><td>10<sup>5</sup></td><td></td><td>42.9</td><td>40.8</td><td>3.1</td><td>4.2</td><td>4.2</td></tr>
<tr><td>10<sup>6</sup></td><td>10<sup>6</sup> 10<sup>5</sup></td><td></td><td>75.0</td><td>76.4</td><td>88.8</td><td>13.9</td><td>15.2</td>
<tr><td>10<sup>9</sup></td><td>10<sup>9</sup> 10<sup>5</sup></td><td></td><td>186.5</td><td>188.5</td><td>201.0</td><td>294.3</td><td>283.9</td></tr>
<tr><td>10<sup>12</sup></td><td>10<sup>12</sup> 10<sup>5</sup></td><td></td><td>288.3</td><td>288.3</td><td>302.2</td><td>387.9</td><td>1069.5</td></tr>
<tr><td>10<sup>15</sup></td><td>10<sup>15</sup> 10<sup>5</sup></td><td></td><td>485.6</td><td>489.1</td><td>496.3</td><td>585.4</td><td>1267.4</td></tr>
</table>
<p>Por tanto, la forma óptima de elegir <b>límite de lo trivial de fuerza bruta en 100 o 1000</b>.</p>
<p>Para todas las siguientes pruebas elegí un límite de 1000.</p>
<h3>el tiempo Promedio de trabajo en el intervalo de números</h3>
<p>Ahora, cuando hemos seleccionado el límite de lo trivial fuerza bruta, puede probar la velocidad de trabajo en varios segmentos.</p>
<p><a href=BPSW_test2.zip>Descargar</a> un programa de prueba (el codigo fuente y el archivo exe). [83 KB]</p>
<table class=table1 cellspacing=0>
<tr><th width=100>inicio<br>corte</th><th width=100>final<br>corte</th><th width=200>tiempo de trabajo<br>en números impares</th><th width=200>tiempo de trabajo<br>en simples números</th></tr>
<tr><td>1</td><td>10<sup>5</sup></td><td>1.2</td><td>4.2</td></tr>
<tr><td>10<sup>6</sup></td><td>10<sup>6</sup> 10<sup>5</sup></td><td>13.8</td><td>88.8</td></tr>
<tr><td>10<sup>7</sup></td><td>10<sup>7</sup> 10<sup>5</sup></td><td>16.8</td><td>115.5</td></tr>
<tr><td>10<sup>8</sup></td><td>10<sup>8</sup> 10<sup>5</sup></td><td>21.2</td><td>164.8</td></tr>
<tr><td>10<sup>9</sup></td><td>10<sup>9</sup> 10<sup>5</sup></td><td>24.0</td><td>201.0</td></tr>