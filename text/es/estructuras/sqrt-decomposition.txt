\h1{Sqrt-la descomposición}
Sqrt-descomposición --- es el método o estructura de datos que permite realizar las operaciones habituales (suma de los elementos de подмассива, la búsqueda de un mínimo/máximo etc.) por $O(\sqrt{n})$, que es mucho más rápido que $O(n)$ trivial para el algoritmo.
Primero vamos a describir la estructura de datos para uno de los más simples aplicaciones de esta idea y, a continuación, mostraremos cómo generalizar para resolver otros problemas, y, por último, vamos a ver algunos de lo contrario la aplicación de esta idea: la ruptura de entrada de solicitudes sqrt-bloques.
\h2{Estructura de datos en la base de la raiz-de la descomposición}
\bf{Pondremos a la tarea}. Dan $a[0 \ldots, n-1]$. Se desea implementar una estructura de datos, que es capaz de encontrar la suma de los elementos $a[l \ldots r]$ sin $l$ y $r$ $O(\sqrt{n})$ operaciones.
\h3{Descripción}
La idea principal de raiz-de la descomposición consiste en que hagamos la siguiente \bf{предпосчет}: dividir el array $a$ en bloques de longitud aproximadamente $\sqrt{n}$, y en cada bloque del $i$ antemano предпосчитаем la suma de $b[i]$ elementos en el mismo.
Se puede considerar que la longitud de un bloque y el número de bloques iguales para el mismo número --- raíz de $n$, округленному arriba:
$$ s = \left\lceil \sqrt{n} \right\rceil, $$
entonces $a[]$ se divide en bloques de aproximadamente así:
$$ \underbrace{ a[0] ~ a[1] ~ \ldots ~ a[s-1] }_{b[0]} ~~~ \underbrace{ a[s] ~ a[s (1)] ~ \ldots ~ a[2 \cdot s-1] }_{b[1]} ~~~ \ldots ~~~ \underbrace{ a[(s-1) \cdot s] ~ \ldots ~ a[n] }_{b[s-1]}. $$
Aunque en el último bloque puede contener menos de $s$, de los elementos (si $n$, no se divide en $s$), --- no importa.
Por lo tanto, para cada bloque de $k$ sabemos la cantidad en él $b[k]$:
$$ b[k] = \sum_{i=k \cdot s}^{\min (n-1, (k-1) \cdot s - 1)} a[i]. $$
Por tanto, que estos valores $b_k$ previamente calculado (para ello es necesario, obviamente, $O(n)$ operaciones). Que pueden dar al cálculo de la respuesta en la próxima consulta $(l,r)$? Tenga en cuenta que si el trozo de $[l
La ilustración (aquí a través de $k$ indicado por el número de bloque, en el que se asienta $l$, y por $p$ --- número de bloque, en el que se asienta $r$):
$$ \sum_ ~ \overbrace{ a[l] ~ \ldots ~ a[(k-1) \cdot s-1] ~ \underbrace{ a[(k-1) \cdot s] ~ \ldots ~ a[(k 2) \cdot s-1] }_{b[k-1]} ~ \ldots ~ \underbrace{ a[(p-1) \cdot s] ~ \ldots ~ a[p \cdot s-1] }_{b[p]}\ a[p \cdot s] ~ \ldots a_r }^{sum=?} ~ \ldots $$
En esta figura se ve que para calcular el monto en el tramo de $[l \ldots r]$, es necesario sumar los elementos de sólo dos "colas" de: $[l \ldots (k 1) \cdot s-1]$ y $[p \cdot s \ldots r]$, y sumar el valor de $b[i]$ en todos los bloques, a partir de $k 1$ hasta $p-1$:
$$ \sum_{i=l}^{r} a[i] = \sum_{i=l}^{(k, 1) \cdot s-1} a[i] \sum_{i=k 1}^{p-1} b[i] \sum_{i=p \cdot s}^{r} a[i] $$
(nota: esta fórmula no es correcta, cuando $k=p$: en este caso, algunos elementos se resumió doble
Así que экононим un número considerable de operaciones. De hecho, el tamaño de cada una de las "colas", obviamente, no supera la longitud de la unidad $s$, y el número de bloques no supera $s$. Ya que $s$ seleccionamos $\approx \sqrt{n}$, entonces para calcular el valor en el intervalo $[l \ldots r]$ necesitaremos sólo $O(\sqrt{n})$ operaciones.
\h3{Aplicación}
Veamos primero el simplísimo la aplicación de:
\code
// datos de entrada
int n
vector<int> a (n)
// предпосчет
int len = (int) sqrt (n .0) 1
vector<int> b (len)
for (int i=0
b[i / len] = a[i]
// la respuesta a las solicitudes de
for (
int l, r
int sum = 0
for (int i=l
if (i % len == 0 
// si i indica el inicio de un bloque entero yace en el [l
sum = b[i / len]
i = len
}
else {
sum = a[i]
 i
}
}
\endcode
La desventaja de esta aplicación es que en ella demasiado de las operaciones de división (que, como se sabe, son considerablemente más lento de otras operaciones). En lugar de ello, se puede contar el número de bloque $c_l$ y $c_r$, en la que se encuentran las fronteras de $l$ y $r$, respectivamente, y, a continuación, hacer un ciclo de bloques de $c_l 1$ $c_r-1$, por separado tratando de "colas" en los bloques de $c_l$ y $c_r$. Además, cuando tal aplicación caso $c_l = c_r$ se convierte en especial y requiere un tratamiento individual:
\code
int sum = 0
int c_l = l / len, c_r = r / len
if (c_l == c_r)
for (int i=l
sum = a[i]
else {
for (int i=l, end=(c_l 1)*len-1
sum = a[i]
for (int i=1 c_l
sum = b[i]
for (int i=c_r*len
sum = a[i]
}
\endcode
\h3{Otras tareas}
$$ b[k] = a[i] - old\_a[i]. $$
Por otro lado, en lugar de la tarea sobre la suma de igual forma, puede resolver problemas de \bf{mínimo, máximo} los elementos de la pieza. Si en estas tareas tolerar cambios en los elementos individuales, sino que también será necesario calcular un valor de $b_k$ ese bloque al que pertenece el elemento a cambiar, pero contar ya por completo, el paso de todos los elementos de la unidad por $O(len) = O(\sqrt{n})$ operaciones.
Del mismo modo sqrt-estructura de desglose se puede utilizar para multitud de \bf{otros} de estas tareas: encontrar el número cero de los elementos, el primer elemento distinto de calcular la cantidad de ciertos elementos, etc.
Hay una clase de tareas, cuando se producen \bf{modificación de elementos en el conjunto de la подотрезке}: la suma o la apropiación de los elementos en algún подотрезке de $A$.
Por ejemplo, debe cumplir los siguientes dos tipos de consultas: a sumar a todos los elementos de un segmento $[l
Por último, se pueden combinar ambos tipos de tareas: cambio de los elementos de la instalación y la respuesta a las solicitudes también en el tramo. Ambos tipos de operaciones se ejecutarán por $O(\sqrt{n})$. Para ello, ya que es necesario hacer dos "блоковых" $b$ y $c$: uno --- para asegurar el cambio en el tramo, el otro --- para responder a las solicitudes.
Se puede citar el ejemplo y otras tareas a las que se puede aplicar sqrt-estructura de desglose. Por ejemplo, se puede abordar la tarea de \bf{mantenimiento el conjunto de números} con la posibilidad de agregar/quitar números, verificar el número de afiliación a la multitud, la búsqueda de $k$-el orden de los números. Para esta tarea se debe almacenar el número de ordenadas, divididos en varios bloques de $\sqrt{n}$ de números en cada uno. Al agregar o eliminar un número, será necesario producir un "перебалансировку" de los bloques, echando números que comenzó a/cabo de algunos de los bloques en el comienzo/los extremos de los bloques adyacentes.
\h2{Sqrt-la descomposición de entrada de consulta}
Veamos ahora el otro la aplicación de las ideas de raiz-de la descomposición.
Supongamos que tenemos una cierta tarea, en la que se nos dan algunos datos de entrada y, a continuación, provienen de $k$ comandos/consultas de cada uno de los cuales debemos dar a procesar y emitir una respuesta. Consideramos el caso, cuando las consultas son como solicitan (no modifican el estado de un sistema, y sólo piden un poco de información) y modificadores (es decir, influyen en el estado del sistema, inicialmente, el valor nominal de la entrada de datos).
Objetivo específico puede ser muy compleja, y "honesto" su decisión (que lee una consulta, la procesa, cambiando el estado del sistema, y devuelve la respuesta) puede ser técnicamente difícil o no ser de las fuerzas para el final. Por otro lado, la decisión de "оффлайнового" la opción de la tarea, es decir, cuando no se modifican de la operación, y hay sólo solicitan consultas --- a menudo resulta mucho más fácil. Supongamos que estamos \bf{capaces de hacer frente a las "оффлайновый" opción} de la tarea, es decir, construir un lapso de tiempo de $B(n)$ cierta estructura de datos que puede responder, pero no es capaz de procesar modifican las solicitudes.
Entonces \bf{romperemos de entrada de las solicitudes en los bloques} (¿qué longitud --- hasta que no precisamos
Ahora vamos a por la cola de tomar las consultas de bloque actual y procesar cada uno de ellos. Si la solicitud actual --- модифицирующий, lo perderemos. Si la solicitud actual --- el solicitante, volvemos a la estructura de datos para оффлайнового de la variante de la tarea, pero previamente \bf{cuenta los modifican las solicitudes en el bloque actual}. Esta racionalización de la modificación de las consultas es posible, no siempre, y esto debe ser lo suficientemente rápido --- por hora $O(s)$ o un poco peor
Porque el anterior razonamiento es demasiado abstractas, a continuación se presentan varios ejemplos de tareas a las que se refiere esta sqrt-la descomposición.
\h3{Ejemplo de un problema: el aumento en el tramo}
Planteo del problema: dada una matriz de números $a[1 \ldots, n]$, y se recibe la solicitud de dos tipos: averiguar el valor de $i$-ésimo elemento de la matriz, y añadir un cierto número de $x$ a todos los elementos de la matriz en cierto tramo $a[l \dots r]$.
Aunque esta tarea se puede solucionar, y que sin este recepción con una ruptura de las consultas en los bloques presentamos aquí --- como sencilla y clara de la aplicación de este método.
Así, romperemos de entrada de las solicitudes en bloques de $\sqrt{m}$ (donde $m$ --- número de solicitudes). En el comienzo del primer bloque de consultas de ninguna de las estructuras a construir no es necesario, simplemente guardamos el array $a[]$. Vamos ahora por solicitud del primer bloque. Si la solicitud actual --- solicitud de incorporación, hasta que saltamos. Si la solicitud actual --- solicitud de lectura de los valores en cierta posición $i$, que al principio sólo tomemos como respuesta el valor de $a[i]$. A continuación, vamos a hacer un recorrido por todos пропущенным en este bloque, las peticiones de incorporación, y para aquellos en los que cae $i$, se aplica un aumento actual de la respuesta.
Por lo tanto, hemos aprendido a responder a las cuales solicitan las consultas por hora $O(\sqrt{m})$.
Solo queda observar que al final de cada bloque de las solicitudes que deben aplicar los modificadores consultas de este bloque a la matriz $a[]$. Pero esto es fácil de hacer por $O(n)$ --- suficiente para cada solicitud de incorporación $(l,r,x)$ señalar en el informativo de la matriz en el punto $l$ el número de $x$, y en el punto $r 1$ --- número de $-x$, y luego caminar por la matriz, aumentando la cantidad a la matriz $a[]$.
Por lo tanto, la asíntotas de la decisión será de $O (\sqrt{m} (n m))$.
\h3{Ejemplo de tarea: disjoint-set-union, con la división}
Hay неориентированный el conde con $n$ vértices y $m$ las costillas. Se recibe la solicitud de tres tipos: añadir arista $(x_i,y_i)$, eliminar la arista $(x_i,y_i)$, y comprobar, vinculados o no a la cima de $x_i$ y $y_i$ camino.
Si las solicitudes de eliminación faltaban, entonces la solución sería conocida la estructura de datos \algohref=dsu{disjoint-set-union (sistema de conjuntos disjuntos)}. Sin embargo, si tiene eliminaciones tarea mucho más complicado.
Haremos de la siguiente manera. Al comienzo de cada bloque de consultas de ver cuáles son las costillas en este bloque, serán eliminados, y en seguida \bf{eliminar} del conde. Ahora construiremos un sistema de conjuntos disjuntos (dsu) en la que recibió la columna.
Como estamos ahora, debe responder a una nueva consulta bloque actual? Nuestro sistema de conjuntos disjuntos "sabe" todas las costillas, además de aquellos que se añaden/eliminan en el bloque actual. Sin embargo, la eliminación de la dsu hemos de hacer ya no es necesario --- habíamos eliminado todos esos nervios de la columna. Por lo tanto, todo lo que se puede-es más, добавляющиеся de la aleta, que puede ser un máximo de $\sqrt{m}$ de las piezas.
Por lo tanto, al responder al actual solicita la consulta podemos simplemente soltar un rastreo en el ancho de los componentes de la conectividad de dsu, que cumplirá $O(\sqrt{m})$, ya que tenemos en el examen sólo serán $O(\sqrt{m})$ costillas.
\h2{Locales la tarea de responder a подотрезках de la matriz y universal sqrt-heurística para ellos}
Veamos una interesante variación de la idea de raiz-de la descomposición.
Supongamos que tenemos una cierta tarea en la que hay una matriz de números, que hacen solicitan consultas, que tiene la apariencia de $(l,r)$ --- aprender algo sobre подотрезке $a[l \ldots r]$. Creemos que las solicitudes no se modifican, y conocemos de antemano, es decir, la tarea --- оффлайновая.
Por último, vamos a introducir la última \bf{restricción}: creemos que sabemos rápidamente a calcular la respuesta a la consulta cuando se cambia la izquierda o a la derecha de la frontera en la unidad. Es decir, si sabemos la respuesta a la consulta $(l,r)$, rápidamente podemos calcular la respuesta a la consulta $(l 1,r)$ o $(l-1,r)$ o $(l,r 1)$ $(l,r-1)$.
Describamos ahora \bf{universal de la heurística} para todas esas tareas. Ordenará las solicitudes por pareja: $(l ~ {\rm div} ~ \sqrt{n}, r)$. Es decir, hemos clasificado las solicitudes de número de raiz-de un bloque en el que se encuentra el extremo izquierdo, y en caso de empate --- de extremo.