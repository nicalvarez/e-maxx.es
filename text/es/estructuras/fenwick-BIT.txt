<h1>el Árbol de Fenwicks</h1>
<p><b>Árbol de Fenwicks</b> es una estructura de datos árbol de la matriz, que posee las siguientes propiedades:</p>
<p>1) permite calcular el valor de cierta reversible de la operación de G en cualquier intervalo [L
<p>2) permite cambiar el valor de cualquier elemento de <b>O (log N)</b>
<p>3) requiere <b>O (N) de la memoria</b>, es decir, exactamente la misma cantidad de una matriz de N elementos
<p>4) fácilmente se resume en caso de que las matrices multidimensionales.</p>
<p>el Más común el uso de la madera Fenwicks - para calcular la suma en el tramo, es decir, la función G (X1, ..., Xk) = X1 ... Xk.</p>
<p>el Árbol de Fenwicks se describió por primera vez en el artículo "A new data structure for cumulative frequency tables" (Peter M. Fenwick, 1994).</p>
<h2>Descripción</h2>
<p>Para simplificar la descripción suponemos que la operación de G, por la que construimos el árbol es el <b>cantidad</b>.</p>
<p>Que dada una matriz A[0..N-1]. El árbol de Fenwicks matriz <b>T</b>[0..N-1], en cada elemento se almacena la suma de algunos de los elementos de la matriz A:</p>
<formula><b>T<sub>i</sub> = importe A<sub>j</sub></b> para todos los <b>F(i) 
<p>donde F(i) es una función de la que definiremos más adelante.</p>
<p>Ahora ya podemos escribir <b>pseudocódigo</b> para la función de cálculo de cantidades en el intervalo [0
<code>int suma (int r)
{
int result = 0
while (r >= 0) {
result = t[r]
r = f(r) - 1
}
return result
}
void inc (int i, int delta)
{
para todos los j para los que F(j) 
{
t[j] = delta
}
}</code>
<p>la Función sum funciona de la siguiente manera. En vez de ir por todos los elementos de la matriz A, se mueve por la matriz T, haciendo "saltar" a través de cortes, donde esto sea posible. En primer lugar, se añade a la respuesta de la cantidad de valor en el intervalo [F(R)
<p>la Función inc se mueve en la dirección opuesta - hacia el aumento de los índices mediante la actualización de los valores de la suma de T<sub>j</sub> sólo para las posiciones para las que es necesario, es decir, para todo j, para los cuales F(j) 
<p>es Evidente que, desde la selección de la función F dependerá de la velocidad de ejecución de ambas operaciones. Ahora vamos a ver una función que le permitirá alcanzar una productividad en ambos casos.</p>
<p><b>Definir valor de F(X)</b> de la siguiente manera. Veamos binaria para la grabación de este número, y mira a su bit menos significativo. Si es cero, entonces F(X) = X. de lo Contrario, la representación binaria de un número X termina en un grupo de una o varias unidades. Sustituir todas las unidades de este grupo en ceros, y asignamos el valor resultante el valor de la función F(X).</p>
<p>Este es bastante compleja la descripción se corresponde muy sencilla fórmula:</p>
<formula><b>F(X) = X 
<p>donde 
<p>es Fácil ver que esta fórmula corresponde словесному la descripción de la función que el anterior.</p>
<p>
<p>Nos quedan sólo aprender a encontrar rápidamente estos números j, para los cuales F(j) 
<p>sin Embargo, es fácil comprobar que todos estos números j se obtienen de la i sucesivas sustituciones del derecho (el más pequeño) de cero en representación binaria. Por ejemplo, para i = 10 obtenemos que j = 11, 15, 31, 63, etc.</p>
<p>aunque parezca extraño, este tipo de operación (sustitución de la más joven de cero en la unidad también cumple muy sencilla fórmula:</p>
<formula><b>H(X) = X | (X 1)</b></formula>
<p>donde | es la operación bit a bit lógico "O".</p>
<h2>la Implementación de madera Fenwicks de la suma para el caso unidimensional</h2>
<code>vector
int n
void init (int nn)
{
n = nn
t.assign (n, 0)
}
int suma (int r)
{
int result = 0
for (
result = t[r]
return result
}
void inc (int i, int delta)
{
for (
t[i] = delta
}
int suma (int l, int r)
{
return sum (r) - sum (l-1)
}
void init (vector
{
init ((int) a.size())
for (unsigned i = 0
inc (i, a[i])
}</code>
<h2>la Implementación de madera Fenwicks para un mínimo para el caso unidimensional</h2>
<p>inmediatamente se Debe notar que, dado que el árbol de Fenwicks permite encontrar el valor de la función en cualquier intervalo [0
<code>vector
int n
const int INF = 1000*1000*1000
void init (int nn)
{
n = nn
t.assign (n, INF)
}
int getmin (int r)
{
int result = INF
for (
result = min (result, t[r])
return result
}
void update (int i, int new_val)
{
for (
t[i] = min (t[i], new_val)
}
void init (vector
{
init ((int) a.size())
for (unsigned i = 0
update (i, a[i])
}</code>
<h2>la Implementación de madera Fenwicks de la suma para el caso bidimensional</h2>