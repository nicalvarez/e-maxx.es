\h1{Discrete square root}
The task of the discrete root extraction (by analogy with \algohref=discrete_log{the problem of discrete logarithm}) is as follows. According to the $n$ ($n$ --- simple), $a$, $k$ is required to find all $x$, satisfying the condition:
$$ x^k \equiv a \pmod{n} $$
\h2{an algorithm for the solution}
To solve the problem will be to reduce it to the problem of discrete logarithm.
Drop immediately the case when $a=0$ in this case, immediately find the answer $x=0$.
Since in this case ($n$ --- simple) any number from $1$ to $n-1$ can be represented as the degree of a primitive root, then the task of discrete root we can represent as:
$$ {\left( g^y \right)}^k \equiv a \pmod{n} $$
where
$$ x \equiv g^y \pmod{n} $$
A trivial transformation we get:
$$ {\left( g^k \right)}^y \equiv a \pmod{n} $$
May we find some solution $y_0$ of this equation, then one of the solutions to the problem of discrete root will be $x_0 = g^{y_0} \pmod{n}$.
\h2{Finding all solutions, knowing one of them}
To completely solve the problem, it is necessary to learn one found $x_0 = g^{y_0} \pmod{n}$ to find other solutions.
$$ x^k \equiv g^{ y_0 \cdot k l \cdot \phi(n) } \equiv a \pmod{n}\ \ \ \ forall\ l \in {\cal Z} $$
Hence all solutions are of the form:
$$ x = g^{ y_0 \frac{ l \cdot \phi(n) }{ k } } \pmod{n}\ \ \ \ forall\ l \in {\cal Z} $$
where $l$ is chosen so that the fraction $\frac{ l \cdot \phi(n) }{ k }$ was intact. To this fraction was intact, the numerator must be a multiple of the least common multiple of $\phi(n)$ and $k$, where (Recalling that the least common multiple of two numbers ${\rm lcm}(a,b) = \frac{ a \cdot b }{ {\rm gcd}(a,b) }$), we get:
$$ x = g^{ y_0 i \frac{ \phi(n) }{ {\rm gcd}(k,\phi(n)) } } \pmod{n}\ \ \ \ forall\ i \in {\cal Z} $$
\h2{Implementation}
Here is the full implementation, including finding primitive roots discrete, taking the logarithm and the finding and conclusion of all decisions.
\code
int gcd (int a, int b) {
return a ? gcd (b%a, a) : b
}
int powmod (int a, int b, int p) {
int res = 1
while (b)
if (b 
res = int (res * 1ll * a % p) --b
else
a = int (a * 1ll * a % p), b >>= 1
return res
}
int generator (int p) {
vector<int> fact
int phi = p-1, n = phi
for (int i=2
if (n % i == 0) {
fact.push_back (i)
while (n % i == 0)
n /= i
}
if (n > 1)
fact.push_back (n)
for (int res=2
for (size_t i=0
ok 
if (ok) return res
}
return -1
}
int main() {
int n, k, a
cin >> n >> k >> a
if (a == 0) {
puts ("1\n0")
return 0
}
int g = generator (n)
int sq = (int) sqrt (n .0) 1
vector < pair<int,int> > dec (sq)
for (int i=1
dec[i-1] = make_pair (powmod (g, int (i * sq * 1ll * k % (n - 1)), n), i)
sort (dec.begin(), dec.end())
int any_ans = -1
for (int i=0
int my = int (powmod (g, int (i * 1ll * k % (n - 1)), n) * 1ll * a % n)
vector < pair<int,int> >::iterator it =
lower_bound (dec.begin(), dec.end(), make_pair (my, 0))
if (it != dec.end() 
any_ans = it->second * sq - i
break