\h1{ Search for all tandem repeats in a string. The Algorithm Of The Main Event-Lorentz }
Given a string $s$ of length $n$.
\bf{Tandem repeat} (tandem repeat) it is called two occurrences of any substring in a row. In other words, the tandem repeat is described by a pair of indices $i < j$ such that the substring of $s[i \ldots j]$ --- these are two identical strings, recorded in a row.
\bf{note}. To avoid confusion, all rows in the article we will consider 0-indexed, i.e. the first character of a string has index 0.
The described algorithm was published in 1982, They and Lorentz (see references).
\h2{ Example }
Consider tandem repeats on the example of some simple string, for example:
$$ "acababaee" $$
This line contains the following tandem repeats:
\ul{
\li $[2
\li $[3
\li $[7
}
Another example:
There are only two tandem repeat:
\ul{
\li $[0
\li $[2
}
\h2{ Number of tandem repeats }
Generally speaking, the tandem repeats in a string of length $n$ can be $O(n^2)$.
An obvious example is a string composed of $n$ identical letters in a row tandem repeat is any substring of even length, which is about $n^2 / 4$. In General, any periodic line with a short period will contain a lot of tandem repeats
Moreover, there is the concept of \bf{series} --- quadruples of numbers that describe the whole group of the periodic substrings. It was proved that the number of series in any row linearly with respect to the length of the string.
However, the following algorithm does not use the concept of the series, so we will not detail this concept.
Here are other interesting results related to the number of tandem repeats:
\ul{
\li If coding tandem repeats of three numbers (called triples Crochemore (Crochemore)) $(i,p,r)$ (where $i$ --- start position, $p$ --- the length of the repeating substring, $r$ --- the number of repetitions), all tandem repeats of any line can be derived using $O (n \log n)$ such triples. (Such a result is obtained at the output of the algorithm Crochemore finding all tandem repeats.)
\li Line Fibonacci defined as follows:
$$ t_0 = b, $$
$$ t_1 = a, $$
$$ t_i = t_{i-1} t_{i-2}, $$
The number of tandem repeats in the $i$-th Fibonacci string of length $f_i$, even compressed using triples Crochemore is $O (f_n \log f_n)$.
The number of primitive tandem repeats in rows Fibonacci --- also has order $O (f_n \log f_n)$.
}
\h2{ Algorithm Maine-Lorentz }
The main idea of the algorithm is the Lorentz pretty standard: this algorithm \bf {divide-and-conquer}.
The asymptotic behavior of the algorithm divide-and-conquer is a well researched. In particular, it is important for us that if we learn to look for crossing the tandem repeats in a string of length $n$ $O(n)$, then the total complexity of the entire algorithm will be $O (n \log n)$.
\h3{ Search crossing tandem repeats }
Denote by $u$ and $v$ the two halves of the string $s$:
$$ s = u, v, $$
(their length is approximately equal to the length of the string $s$, divided in half).
\h4{ Right and left tandem repeats }
Consider an arbitrary tandem repeat and look at his average character (more precisely, on the character that begins the second half of the tandem
Learn search \bf{left tandem repeats}
\h4{ Central position $cntr$ tandem repeat }
We denote the length of the desired left tandem repeat over $2k$ (i.e., the length of each half of a tandem repeat - - - $k$). Consider the first character of the tandem repeat, falling into a string $v$ (he is in the string $s$ at position $length(u)$). It coincides with the character standing on the $k$ positions before him
\bf{for Example}, consider this line:
$$ s = "cac|ada" $$
(the pipe symbol separates the two halves $u$ and $v$)
Tandem repeat $"caca"$ contained in this string will be discovered when we will see the value of $cntr = 1$ --- because it is in position $1$ is the character 'a', coinciding with the first character of a tandem repeat, trapped in a half $v$.
\h4{ Criterion of the presence of tandem repeat with a specified center $cntr$ }
Received such a scheme (for the abstract line, which contains a tandem repeat $"abcabc are"$):
$$$
\setlength{\unitlength}{2mm}
\begin{picture}(30.20mm)
\linethickness{0.075 mm}
\put(0,10)%
{\line(0,1){2}}
\put(30,10)%
{\line(0,1){2}}
\put(0,10)%
{\line(1,0){30}}
\put(0,12)%
{\line(1,0){30}}
\put(10.5,10)%
{\line(0,1){2}}
\put(12,10)%
{\line(0,1){2}}
\put(11.25,6.1)%
{\vector(0,1){3.4}}
\put(10.5,5)%
{$cntr$}
\linethickness{0.4 mm}
\put(15,10)%
{\line(0,1){2}}
\linethickness{0.075 mm}
\put(9.3,10.5)
{a}
\put(10.8,10.5)
{b}
\put(12.3,10.5)
{c}
\put(13.8,10.5)
{a}
\put(15.3,10.5)
{b}
\put(16.8,10.5)
{c}
{\oval(3,0.6)[t]}
\put(11.5,13.5)%
{$l_2$}
\put(16.5,12.5)%
{\oval(3,0.6)[t]}
\put(16,13.5)%
{$l_2$}
\put(9.75,9.5)%
{\oval(1.5,0.6)[b]}
\put(9.1,7.5)%
{$l_1$}
\put(14.25,9.5)%
{\oval(1.5,0.6)[b]}
\put(13.6,7.5)%
{$l_1$}
\end{picture}
$$$
Here in $l_1$ and $l_2$, we have identified the lengths of the two pieces of tandem repeat: $l_1$ --- this is the length of the part of the tandem repeat positions up to $cntr-1$ and $l_2$ --- this is the length of the part of the tandem repeat from $cntr$ until the end of the half tandem repeat. Thus, $l_1 l_2 l_1 l_2$ --- this is the length of the tandem repeat.
\ul{
\li Let $k_1$ --- this is the largest number such that $k_1$ of characters before the $cntr$ coincide with the last $k_1$ string $u$:
$$ u[ cntr-k_1 \ldots cntr-1 ] == u[ length(u)-k_1 \ldots length(u)-1 ]. $$
\li Let $k_2$ --- this is the largest number such that $k_2$ of characters, starting at $cntr$, match the first $k_2$ string $v$:
$$ u[ cntr \ldots cntr k_2-1] == v[ 0 \ldots k_2-1 ]. $$
\li Then should be:
$$ \cases{
l_1 \le k_1, \cr
l_2 \le k_2.
} $$
}
\ul{
\li All tandem repeats, which we will now discover, will be of length $2 l = 2 (length(u) - cntr)$.
However, such tandem repeats can be \bf{several}: it all depends on the choice of the lengths of the pieces of the $l_1$ and $l_2 = l - l_1$.
\li'll Find $k_1$ and $k_2$, as described above.
\li Then matching will be tandem repeats, for which the lengths of the pieces of the $l_1$ and $l_2$ satisfy the conditions:
$$ \cases{
l_1 l_2 = l = length(u) - cntr, \cr
l_1 \le k_1, \cr
l_2 \le k_2.
} $$
}
So, the whole problem is reduced to the rapid calculation of the lengths of $k_1$ and $k_2$ for each value of $cntr$.
Recall their definitions:
\ul{
\li $k_1$ --- maximum non-negative number for which made:
$$ u[ cntr-k_1 \ldots cntr-1 ] == u[ length(u)-k_1 \ldots length(u)-1 ]. $$
\li $k_2$ --- maximum non-negative number for which made:
$$ u[ cntr \ldots cntr k_2-1] == v[ 0 \ldots k_2-1 ]. $$
}
Both of these query can be answered for $O(1)$, using \bf{\algohref=z_function{an algorithm for finding the Z -}}:
\ul{
Then the value of $k_1$ specific $cntr$ is simply equal to the corresponding value in the array Z-function.
\li For quickly finding the values of $k_2$ are kindly requested to calculate the Z-function for the string $v \
To find the right tandem repeats, it is necessary to act similarly, we define the center of a $cntr$ as a symbol that matches the symbol of the tandem repeat, caught in the first row.
Then the length of $k_1$ is defined as the largest number of character positions up to $cntr$ inclusive, coinciding with the last characters of the string $u$. Length $k_2$ is defined as the maximum number of characters starting from $cntr 1$, coinciding with the first characters of the string $v$.
\h4{ Asymptotic }
Asyptotic algorithm Maine-Lorentz will be, so $O (n \log n)$: since this algorithm is an algorithm divide-and-conquer, each recursive launch of which is linear with respect to the length of lines: four lines in linear time searched for them \algohref=z_function{Z-function}, and then moves to the value of $cntr$ and displays all the groups detected by tandem repeats.
$$ \cases{
l_1 l_2 = l, \cr
l_1 \le k_1, \cr
l_2 \le k_2.
} $$
\h2{ Implementation }
We will present an implementation of the algorithm the main event-Lorentz, which in time $O (n \log n)$ finds tandem repeats of a given string in a compressed form (in the form of groups described by four numbers).
\code
vector<int> z_function (const string 
int n = (int) s.length()
vector<int> z (n)
for (int i=1, l=0, r=0
if (i <= r)
z[i] = min (r-i 1, z[i-l])
while (i z[i] < n 
 z[i]
if (i z[i]-1 > r)
l = i, r = i z[i]-1
}
return z
}
void output_tandem (const string 
int pos
if (left)
pos = cntr-l1
else
pos = cntr-l1-l2-l1 1
cout << "[" << shift pos << ".." << shift pos 2*l-1 << "] = " << s.substr (pos, 2*l) << endl
}
void output_tandems (const string 
for (int l1=1
if (left 
if (l1 <= k1 
}
}
inline int get_z (const vector<int> 
return 0<=i 
}
void find_tandems (string s, int shift = 0) {
int n = (int) s.length()
if (n == 1) return
int nu = n/2, nv = n-nu
string u = s.substr (0, nu),
v = s.substr (nu)
string EN = string (u.rbegin(), u.rend()),
rv = string (v.rbegin(), v.rend())
find_tandems (u, shift)
find_tandems (v, shift nu)
vector<int> z1 = z_function (ru),
z2 = z_function (v '