\h1{Tree}
An important feature of segment trees is that they use linear memory capacity: standard segment tree requires about $4n$ memory elements to work on an array of size $n$.
\h2{Description tree of segments in the base case}
\h3{tree Structure segments}
So, what is a tree?
You can say that these segments in which we considered the amount, form a tree: the root of this tree --- segment $[0 \ldots n-1]$, and each vertex has exactly two sons (except for the tops of the leaves, from which a segment has length $1$). Hence the name --- "tree" (although the implementation is usually no tree is not explicitly constructed, but more about that later in the section on implementation).
It should be noted that when $n$, other than powers of two, not all levels of segment tree will be completely filled. For example, when $n=3$, the left son of the root is a segment $[0 \ldots 1]$ has two descendants, while the right child of root --- segment $[2 \2 ldots]$, which is the leaf. No special difficulties when implementing this is not, but nevertheless it must be borne in mind.
\h3{Build}
Asymptotics build a segment tree will be, so $O(n)$.
\h3{Query sum}
Consider now the request amount. Input enter two numbers $l$ and $r$, and we shall for the time $O (\log n)$ to calculate the sum of the numbers on the interval $a[l \ldots, r]$.
The first case is simple: just switch to that son, in which lies our segment request, and apply the described algorithm to the current vertex.
In other words, the evaluation of the query is a downhill segment tree, which extends all the right branches of the tree, and for quick work using already calculated amount for each segment in the segment tree.
In conclusion, it can cause such an understanding of the work request amount: input segment $[l \ldots r]$ is divided into several pootrakul, answer each of which is already calculated and stored in the tree. If you do this split in the right way, thanks to the tree structure of segments the number of required pootrakul will always be $O (\log n)$, which gives the efficiency of the wood segments.
\h3{Query update}
This is a more simple query than the query calculation amount. The fact that the element $a[i]$ is involved only in a relatively small number of nodes in the tree segments: namely, in $O (\log n)$ vertices --- one on each level.
\h3{Implementation}
The main selling point-is how \bf{store} segment tree in memory. For simplicity, we will not keep the tree in an explicit form, and we will use this trick: let's say that the root of the tree is the number $1$, his sons --- non $2$ and $3$, their sons --- rooms from $4$ $7$, and so on. It is easy to understand the correctness of the following formula: if the top number is $i$, let its left son is the node number $2i$ and the right - - - $2i 1$.
Thus, the segment tree we \bf{stored} just in the form of $t array[]$, of size four times larger than $n$ inputs:
\code
int n, t[4*SEATS]
\endcode
The procedure \bf{build a segment tree} for a given $a array[]$ as follows: this is a recursive function, it is passed the array $a[]$, the number $v$ of the current node of the tree, and borders $tl$ and $tr$ segment corresponding to the current top of the tree. From the main program to call this function should be used with parameters $v=1$, $tl=0$, $tr=n-1$.
void build (int a[], int v, int tl, int tr) {
if (tl == tr)
t[v] = a[tl]
else {
int tm = (tl, tr) / 2
build (a, v*2, tl, tm)
build (a, v*2 1, tm 1, tr)
t[v] = t[v*2] t[v*2 1]
}
}
\endcode
\code
int sum (int v, int tl, int tr, int l, int r) {
if (l > r)
return 0
if (l == tl 
return t[v]
int tm = (tl, tr) / 2
return sum (v*2, tl, tm, l, min(r,tm))
 sum (v*2 1, tm 1, tr, max(l,tm 1), r)
}
\endcode
Finally, \bf{query modification}. He likewise passed information about the current top of the tree segments, and optionally specifies the index changing element, and its new value.
\code
void update (int v, int tl, int tr, int pos, int new_val) {
if (tl == tr)
t[v] = new_val
else {
int tm = (tl, tr) / 2
if (pos <= tm)
update (v*2, tl, tm, pos, new_val)
else
t[v] = t[v*2] t[v*2 1]
}
}
\endcode
It should be noted that the function $\rm update$ easy to make non-recursive, because the recursion in her tail, i.e., the branches never happens: one call can generate only one recursive call. When a non-recursive implementation, the speed may increase several times.
\h2{Advanced version of the segment tree}
Tree --- very flexible structure, and allows to generalize in many different directions. Will try below to classify them.
\h3{More complex functions, and queries}
Improved tree of segments in this direction can be pretty obvious (as in the case of minimum/maximum instead of the sum), and very non-trivial.
\h4{Search minimum/maximum}
Then the segment tree for this task is virtually no different from the tree of the segments described above. Just need to change the method of calculating the $t[v]$ the function $\rm build$ and $\rm update$, and calculate the return response functions $\rm sum$ (replace the summation on the minimum/maximum).
\h4{Search minimum/maximum and the number of times it occurs}
To solve this problem, each vertex of segment tree will retain a pair of numbers: in addition to the maximum number of occurrences for the corresponding section. Then when building the tree, we just have two such pairs received from the sons of the current node, get a pair for the current node.
The Union of two such pairs in one a separate function, because this operation will need to produce and query modification, and search query maximum.
pair<int,int> t[4*SEATS]
pair<int,int> combine (pair<int,int> a, pair<int,int> b) {
if (a.first > b.first)
return a
if (b.first > a.first)
return b
return make_pair (a.first, a.second b.second)
}
void build (int a[], int v, int tl, int tr) {
if (tl == tr)
t[v] = make_pair (a[tl], 1)
else {
int tm = (tl, tr) / 2
build (a, v*2, tl, tm)
build (a, v*2 1, tm 1, tr)
t[v] = combine (t[v*2], t[v*2 1])
}
}
pair<int,int> get_max (int v, int tl, int tr, int l, int r) {
if (l > r)
return make_pair (-INF, 0)
if (l == tl 
return t[v]
int tm = (tl, tr) / 2
return combine (
get_max (v*2, tl, tm, l, min(r,tm)),
get_max (v*2 1, tm 1, tr, max(l,tm 1), r)
)
}
if (tl == tr)
t[v] = make_pair (new_val, 1)
else {
int tm = (tl, tr) / 2
if (pos <= tm)
update (v*2, tl, tm, pos, new_val)
else
update (v*2 1, tm 1, tr, pos, new_val)
t[v] = combine (t[v*2], t[v*2 1])
}
}
\endcode
\h4{Finding the greatest common divisor / lowest common multiple}
I.e. we want to learn how to find the GCD/LCM of all numbers in a given segment of the array.
\h4{count the number of zeros, finding the $k$-th zero}
In this task we want to learn how to respond to a request for the number of zeros in a given segment of the array, as well as the request for finding $k$-th zero element.
When you implement, you can trim the case when $k$-th zero does not exist, upon entry to a function, returned as a response, for example, is $-1$.
\code
int find_kth (int v, int tl, int tr, int k) {
if (k > t[v])
return -1
if (tl == tr)
return tl
int tm = (tl, tr) / 2
if (t[v*2] >= k)
return find_kth (v*2, tl, tm, k)
else
return find_kth (v*2 1, tm 1, tr, k - t[v*2])
}
\endcode
\h4{prefix Search array with a given amount}
This problem can be solved by binary search, calculating each time inside the amount of a particular prefix of the array, but this will lead to the solution at time $O (\log^2 n)$.
\h4{Search podotrutsa with the maximum amount}
Still at the entrance provides an array $a[0 \ldots n-1]$, and requests $(l,r)$, which means: to find such podurets $a[l^\prime \ldots r^\prime]$ that $l \le l^\prime$, $r^\prime \le r$, and the sum of this section $a[l^\prime \ldots r^\prime]$ is maximal. Requests modification of individual elements of the array are allowed. The array elements can be negative (and, for example, if all numbers are negative, then the optimal podotrutsa will be empty-it is the sum equal to zero).
How to build a segment tree with the same data? Again we come to this with a recursive point of view: let current node all four values in the left son and in the son has already counted, count them now for the top. Note that the response at the top is equal to:
\ul{
\li or response in the left son, which means that the best podurets in the current top fits in the cut left a son,
\li or the sum of the maximum suffix in the left son and the maximum prefix in the right son, which means that the best podurets lies its beginning in the left son, and the end is in the right.
}
\code
struct data {
int sum, pref, suff, ans
}
data combine data l, data, r) {
data res
res.sum = l.sum r.sum
res.pref = max (l.pref, l.sum r.pref)
res.suff = max (r.suff, r.sum l.suff)
res.ans = max (max (l.ans, r.ans), l.suff r.pref)
return res
}
\endcode
\code
data make_data (int val) {
data res
res.sum = val
res.pref = res.suff = res.ans = max (0, val)
return res
}
void build (int a[], int v, int tl, int tr) {
if (tl == tr)
t[v] = make_data (a[tl])
else {
int tm = (tl, tr) / 2
build (a, v*2, tl, tm)
build (a, v*2 1, tm 1, tr)
t[v] = combine (t[v*2], t[v*2 1])
}
}
void update (int v, int tl, int tr, int pos, int new_val) {
if (tl == tr)
t[v] = make_data (new_val)
else {
int tm = (tl, tr) / 2
if (pos <= tm)
update (v*2, tl, tm, pos, new_val)
else
update (v*2 1, tm 1, tr, pos, new_val)
t[v] = combine (t[v*2], t[v*2 1])
}
}
\endcode
\code
data query (int v, int tl, int tr, int l, int r) {
if (l == tl 
return t[v]
int tm = (tl, tr) / 2
if (r <= tm)
return query (v*2, tl, tm, l, r)
if (l > tm)
return query (v*2 1, tm 1, tr, l, r)
return combine (
query (v*2, tl, tm, l, tm),
query (v*2 1, tm 1, tr, tm 1, r)
)
}
\endcode
\h3{Save all of the subarray in each vertex of the segment tree}
The easiest way of applying this technique --- when every vertex of segment tree stores a sorted list of all numbers that appear in the corresponding section. In more complex scenarios are not lists, and any data structures built on these lists ($\rm set$, $\rm map$, and so on). But all these methods have in common is that in each vertex of the tree of segments stored some data structure, with the memory size of the order of the length of the corresponding segment.
So, despite the apparent extravagance of such a tree of segments, it consumes memory is not much larger than a normal tree segments.
Here are a few typical applications of such data structures. It is immediately evident the analogy of the tree of segments of this type with \bf{a two-dimensional data structures} (actually, in a sense, this is a two-dimensional data structure, but rather disabilities).
Want to answer queries of the following form: $(l,r,x)$, which means to find the minimum number in the interval $a[l \ldots, r]$, which is greater than or equal to $x$.
\code
vector<int> t[4*SEATS]
void build (int a[], int v, int tl, int tr) {
if (tl == tr)
t[v] = vector<int> (1, a[tl])
else {
int tm = (tl, tr) / 2
build (a, v*2, tl, tm)
build (a, v*2 1, tm 1, tr)
merge (t[v*2].begin(), t[v*2].end(), t[v*2 1].begin(), t[v*2 1].end(),
back_inserter (t[v]))
}
}
\endcode
Now consider \bf{query response}. Going down the tree, as does the standard answer to the query in the segment tree, breaking our period $a[l \ldots r]$ for a few pootrakul (of order $O (\log n)$ pieces). It is clear that the answer to the whole problem is equal to the minimum among the responses to each of these pootrakul. Understand now how to respond to a request for one of these subsegments, coinciding with some top of the tree.
Thus, the answer to the query in one subsegments is $O (\log n)$, and the entire query time $O (\log^2 n)$.
\code
int query (int v, int tl, int tr, int l, int r, int x) {
if (l > r)
return INF
if (l == tl 
vector<int>::iterator pos = lower_bound (t[v].begin(), t[v].end(), x)
if (pos != t[v].end())
return *pos
return INF
}
int tm = (tl, tr) / 2
return min (
query (v*2, tl, tm, l, min(r,tm), x),
query (v*2 1, tm 1, tr, max(l,tm 1), r, x)
)
}
\endcode
\h4{Find the smallest number greater than or equal to a given, at the specified interval. Permitted requests modification}
The task is similar to the previous one, only now allowed requests modifications to handle the assignment $a[i] = y$.
\bf{Build} such tree segments is approximately the same as in the previous problem, only now we have to merge sorted lists, and $\rm multiset$ that will lead to the fact that the asymptotics of the building will deteriorate to $n \log^2 n$ (although, apparently, red-black trees allow you to merge two trees in linear time, however, the STL does not guarantee this).
Finally, \bf{query modification}. For processing we need to go down the tree, making changes to all $O (\log n)$ of lists that contains the affected element. We just removed the old value of this element (not forgetting that we don't need to remove it together with him all the repetitions of this number) and insert the new value.
\code
void update (int v, int tl, int tr, int pos, int new_val) {
t[v].erase (t[v].find (a[pos]))
t[v].insert (new_val)
if (tl != tr) {
int tm = (tl, tr) / 2
if (pos <= tm)
update (v*2, tl, tm, pos, new_val)
else
}
else
a[pos] = new_val
}
\endcode
The processing of this request is also for the time of $O (\log^2 n)$.
\h4{Find the smallest number greater than or equal to a given, at the specified interval. Acceleration using the technique of "fractional cascading"}
Improve the response time of the search query to the time $O (\log n)$ using technology \bf{"fractional cascading"} ("fractional cascading").
The simplest and most obvious example of fractional cascading is \bf{next task}: there are several sorted lists of numbers, and we have in each list to find the first number greater than or equal to the specified value.
But we in our application to the segment tree \bf{not needed} the full power of this technique. The fact that the list in the current node contains all the numbers that can occur in the left and right sons. Therefore, to avoid a binary search on the list of son, it is enough for each list in the segment tree to count for each number of its position in the lists of the left and right sons (more precisely, the position of the first number smaller or equal to the current).
The easiest way this technique be applied to the task when the query modification missing --- then these positions are just numbers, and count them when building the tree very easily inside the algorithm to merge two sorted sequences.
Anyway, the problem is reduced to a purely implementation specific details and the main idea --- replacement $O (\log n)$ binary search one binary search on the list in the root of the tree --- fully described.
\h4{Other possible directions}
\h3{Update on the interval}
Above discussed problems only when a request for modification affects only the array element. Actually, the segment tree allows you to do queries that apply to entire segments of consecutive elements, and to make these requests at the same time $O (\log n)$.
\h4{Addition on the interval}
To make a request of addition, the effective will be stored in each vertex of the tree segments as necessary to add all the numbers of this segment as a whole. For example, if a request comes "to add the entire array $a[0 \ldots n-1]$ 2", we will put in the root of the tree the number of $2$. Thus we will be able to process the request additions on any subsegments now, instead of having to modify all $O (n)$ values.
\code
void build (int a[], int v, int tl, int tr) {
if (tl == tr)
t[v] = a[tl]
else {
int tm = (tl, tr) / 2
build (a, v*2, tl, tm)
build (a, v*2 1, tm 1, tr)
}
}
void update (int v, int tl, int tr, int l, int r, int add) {
if (l > r)
return
if (l == tl 
t[v] = add
else {
int tm = (tl, tr) / 2
update (v*2, tl, tm, l, min(r,tm), add)
update (v*2 1, tm 1, tr, max(l,tm 1), r, add)
}
}
int get (int v, int tl, int tr, int pos) {
if (tl == tr)
return t[v]
int tm = (tl, tr) / 2
if (pos <= tm)
return t[v] get (v*2, tl, tm, pos)
else
return t[v] get (v*2 1, tm 1, tr, pos)
}
\endcode
\h4{Assignment on the interval}
So, after a query modification of the segment tree becomes, generally speaking, irrelevant-is - it still has not fullfilled some modifications.
The output is: make \bf{pushing} information from the root, i.e., if the root of the tree was painted in any number, then painted it the number of the right and left of the son, and of the root of this mark to remove. Then we can paint the left son of the root, without losing any relevant information.
When implementing this means that we need to make the function $\rm push$, which will be transmitted to the top of the tree segments, and it will make pushing information from this peak in both of her sons. To call this function should in the beginning of the processing functions of the query (but not to cause leaf, because of the sheet to push the information is not necessary, and nowhere).
\code
void push (int v) {
if (t[v] != -1) {
t[v*2] = t[v*2 1] = t[v]
t[v] = -1
}
}
void update (int v, int tl, int tr, int l, int r, int color) {
return
if (l == tl 
t[v] = color
else {
push (v)
int tm = (tl, tr) / 2
update (v*2, tl, tm, l, min(r,tm), color)
update (v*2 1, tm 1, tr, max(l,tm 1), r, color)
}
}
int get (int v, int tl, int tr, int pos) {
if (tl == tr)
return t[v]
push (v)
int tm = (tl, tr) / 2
if (pos <= tm)
return get (v*2, tl, tm, pos)
else
return get (v*2 1, tm 1, tr, pos)
}
\endcode
\h4{Adding on an interval, the request is maximum}
Let the query modification will again request the addition of all the numbers some podotrutsa the same number, and the read request will be finding the maximum in a certain subsegments.
Then at each vertex of the tree segments you may need to store the maximum of all subsegments. But the subtlety here is how to calculate these values.
\h4{Other direction}
Here were considered only basic use segment trees in problems with modifications on the segment. The remaining tasks are based upon the same ideas described here.
\h3{Generalization to large dimension}
Let us explain this idea on the example of a specific task.
\h4{two-Dimensional segment tree in the simplest version}
Given a rectangular matrix $a[0 \ldots n-1, 0 \ldots, m-1]$, and receives search queries amounts (or minimum/maximum) on some podpropulsion $a[x_1 \ldots x_2, y_1 \ldots y_2]$, and also requests modification of individual elements of the matrix (i.e., queries of the form $a[x][y] = p$).
So, we will build a two-dimensional segment tree: first segment tree based on the first coordinate ($x$), then in the second ($y$).
\code
void build_y (int vx, int lx, int rx, int vy, int ly, int ry) {
if (ly == ry)
if (lx == rx)
t[vx][vy] = a[lx][ly]
else
t[vx][vy] = t[vx*2][vy] t[vx*2 1][vy]
else {
int my = (ly ry) / 2
build_y (vx, lx, rx, vy*2, ly, my)
build_y (vx, lx, rx, vy*2 1, my 1, ry)
t[vx][vy] = t[vx][vy*2] t[vx][vy*2 1]
}
}
void build_x (int vx, int lx, int rx) {
if (lx != rx) {
int mx = (lx, rx) / 2
build_x (vx*2, lx, mx)
build_x (vx*2 1, 1 mx, rx)
}
build_y (vx, lx, rx, 1, 0, m-1)
}
\endcode
Now let's \bf{query}. To answer a two-dimensional query will be on the same principle: first, to break up a query based on the first coordinate, and then, when we reached some node of the tree segments on the first coordinate --- call request from the corresponding segment tree on the second coordinate.
\code
int sum_y (int vx, int vy, int tly, int try_, int ly, int ry) {
if (ly > ry)
return 0
if (ly == tly 
return t[vx][vy]
int tmy = (tly try_) / 2
return sum_y (vx, vy*2, tly, tmy, ly, min(ry,tmy))
}
int sum_x (int vx, int tlx, int trx, int lx, int rx, int ly, int ry) {
if (lx - > rx)
return 0
if (lx == tlx 
return sum_y (vx, 1, 0, m-1, ly, ry)
int tmx = (tlx trx) / 2
return sum_x (vx*2, tlx, tmx, lx, min(rx,tmx), ly, ry)
 sum_x (vx*2 1, tmx 1, trx, max(lx,tmx 1), rx, ly, ry)
}
\endcode
This function works in time $O (\log n \log m)$, since it first down the tree according to the first coordinate, and for each traversed vertex of this tree --- makes a request to the ordinary wood pieces on the second coordinate.
\code
void update_y (int vx, int lx, int rx, int vy, int ly, int ry, int x, int y, int new_val) {
if (ly == ry) {
if (lx == rx)
t[vx][vy] = new_val
else
t[vx][vy] = t[vx*2][vy] t[vx*2 1][vy]
}
else {
int my = (ly ry) / 2
if (y <= my)
update_y (vx, lx, rx, vy*2, ly, my, x, y, new_val)
else
update_y (vx, lx, rx, vy*2 1, my 1, ry, x, y, new_val)
t[vx][vy] = t[vx][vy*2] t[vx][vy*2 1]
}
}
void update_x (int vx, int lx, int rx, int x, int y, int new_val) {
if (lx != rx) {
int mx = (lx, rx) / 2
if (x <= mx)
update_x (vx*2, lx, mx, x, y, new_val)
else
update_x (vx*2 1, 1 mx, rx, x, y, new_val)
}
update_y (vx, lx, rx, 1, 0, m-1, x, y, new_val)
}
\endcode
Then proceed as follows: each vertex of segment tree based on the first coordinate will be stored segment tree based only on the second coordinate, which are found in the current segment of the first coordinates. In other words, when building a segment tree inside some vertex with number $vx$ and edges $tlx, trx$ we will consider only those points that fall within this period $x \in [tlx
But the payoff would be impossible to do arbitrary \bf{query modification}: in fact, if a new point will appear, it will lead to what we will have in any segment tree on the second coordinate to add a new item in the middle, which is effectively impossible.
\h3{segment Tree with preserving the history of its values (the upgrade to persistent data structure)}
Persistent-data structure is a data structure that each modification remembers its previous state. This allows you to access any us version of this data structure and query on it.
Here is an example implementation for a simple segment tree: when there is only a request totaling on subsegments and request modification of the singular.
\code
struct vertex {
vertex * l, * r
int sum
vertex (int val)
: l(NULL), r(NULL), sum(val)
{ }
vertex (vertex * l, vertex * r)
: l(l), r(r), sum(0)
{
if (l) sum = l->sum
if (r) sum = r->sum
}
}
vertex * build (int a[], int tl, int tr) {
if (tl == tr)
return new vertex (a[tl])
int tm = (tl, tr) / 2
return new vertex (
build (a, tl, tm),
build (a, tm 1, tr)
)
}
int get_sum (vertex * t, int tl, int tr, int l, int r) {
if (l > r)