<h1>Modification of the stack and the queue for finding the minimum in O (1)</h1>
<p>Here we consider three tasks: modifying the stack with the addition of finding the smallest element in O (1), a similar modification of queues and their application to the problem of finding the minimum of all podotraslej fixed length of this array in O (N).</p>
<h2>Modifying the stack</h2>
<p>this will be stored in the stack, not the elements themselves, and pair element and at least in the stack, starting with this element and below. In other words, if you think of the stack as an array of pairs,</p>
<formula>stack[i].second = min { stack[j].first }
j = 0..i</formula>
<p>Clearly, then finding the minimum in the whole stack will be just in the capture of the value stack.top().second.</p>
<p>Implementation:</p>
the <code>stack
<ul>
<li>Add item:
<code>int minima = st.empty() ? new_element : min (new_element, st.top().second)
st.push (make_pair (new_element, minima))
<li>Removing item:
<code>int result = st.top().first
st.pop()
<li>finding the minimum:
<code>minima = st.top().second
</ul>
<h2>Modifying the queue. Method 1</h2>
<p>Look at the implementation of the above operations:</p>
<code>deque
<ul>
<li>finding the minimum:
<code>current_minimum = q.front()
<li>Add item:
the <code>while (!q.empty() 
q.pop_back()
q.push_back (added_element)
<li>Removing item:
<code>if (!q.empty() 
q.pop_front()
</ul>
<p>it is Clear that the average execution time of all these operations is O (1).</p>
<h2>Modifying the queue. Method 2</h2>
<p>the Idea is to reduce the problem to a problem on the stacks, which already was solved. Learn how to model a queue using two stacks.</p>
<p>thus, we perform all the operation is still O (1) (for the simple reason that each element in the worst case, 1 time is added to the stack s1, 1 is transferred to the stack s2 and 1 time is popped from the stack s2).</p>
<p>Implementation:</p>
the <code>stack
<ul>
<li>finding the minimum:
<code>if (s1.empty() || s2.empty())
current_minimum = s1.empty ? s2.top().second : s1.top().second
else
current_minimum = min (s1.top().second, s2.top().second)
<li>Add item:
<code>int minima = s1.empty() ? new_element : min (new_element, s1.top().second)
<li>Removing item:
<code>if (s2.empty())
while (!s1.empty()) {
int element = s1.top().first
s1.pop()
int minima = s2.empty() ? element : min (element, s2.top().second)
s2.push (make_pair (element, minima))
}
result = s2.top().first
s2.pop()
</ul>
<h2>the problem of nding the minimum of all podotraslej fixed length of the array</h2>
<p>given an array a of length N and an integer M 
<formula>min (A[i], min (A[i], min (A[i], ..., min (A[i]
<p>Solve this problem in linear time, i.e. O (N).</p>