<h1>Tree Fenwick</h1>
<p><b>Tree Fenwick</b> is a data structure, the tree on the array with the following properties:</p>
<p>1) allows us to calculate the value of a certain reversible operation G on any interval [L
<p>2) you can change the value of any element in <b>O (log N)</b>
<p>3) requires <b>O (N) memory</b>, or rather, exactly the same as an array of N elements
<p>4) easily generalizes to the case of multidimensional arrays.</p>
<p>Fenwick Tree was first described in the article "A new data structure for cumulative frequency tables" (Peter M. Fenwick, 1994).</p>
<h2>Description</h2>
<p>For ease of description, we assume that the operation of G on which we build the tree, is the <b>sum</b>.</p>
<p>given an array A[0..N-1]. Fenwick's tree - array <b>T</b>[0..N-1], each element of which is stored the sum of some elements of the array A:</p>
<formula><b>T<sub>i</sub> = sum (A<sub>j</sub></b> for all <b>F(i) 
<p>Now we can write <b>code</b> function to calculate the sum on the interval [0
<code>int sum (int r)
{
int result = 0
while (r >= 0) {
result = t[r]
r = f(r) - 1
}
return result
}
void inc (int i, int delta)
{
for all j for which F(j) 
{
t[j] = delta
}
}</code>
<p>the Function inc is moving in the opposite direction - in the direction of increasing indices, updating the value of T<sub>j</sub> only for those positions for which it is needed, i.e. for all j for which F(j) 
<p>it is Obvious that the choice of the function F will depend on the speed of both operations. We now consider a function that will allow you to achieve logarithmic performance in both cases.</p>
<p>This rather complex description of a very simple formula:</p>
<formula><b>F(X) = X 
<p>where 
<p>it is Easy to see that this formula corresponds to the verbal description of the function given above.</p>
<p>
<p>We just have to learn how to quickly find the number of j for which F(j) 
<p>oddly enough, this operation (replacement of the youngest zero on the unit) also corresponds to a very simple formula:</p>
<formula><b>H(X) = X | (X 1)</b></formula>
<p>where | is the bitwise logical "OR".</p>
<h2>implementation of the Fenwick tree for the sum of one-dimensional case</h2>
<code>vector
int n
void init (int nn)
{
n = nn
t.assign (n, 0)
}
int sum (int r)
{
int result = 0
for (
result = t[r]
return result
}
void inc (int i, int delta)
{
for (
t[i] = delta
}
{
return sum (r) - sum (l-1)
}
void init (vector
{
init ((int) a.size())
for (unsigned i = 0
inc (i, a[i])
}</code>
<h2>implementation of the Fenwick tree for at least one-dimensional case</h2>
<code>vector
int n
const int INF = 1000*1000*1000
void init (int nn)
{
n = nn
t.assign (n, INF)
}
int getmin (int r)
{
int result = INF
for (
result = min (result, t[r])
return result
}
void update (int i, int new_val)
{
for (
t[i] = min (t[i], new_val)
}
void init (vector
{
init ((int) a.size())
for (unsigned i = 0
update (i, a[i])
}</code>
<h2>implementation of the Fenwick tree for the sum for the two-dimensional case</h2>
<p>As already mentioned, the tree Fenwick easily generalized to the multidimensional case.</p>